services:
  # База данных PostgreSQL
  postgres:
    image: postgres:13
    container_name: aibot-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount init script as an individual file, not a directory
      - "${PWD}/scripts/init-postgres.sql:/docker-entrypoint-initdb.d/001-init.sql:ro"
    environment:
      - POSTGRES_USER=aibot
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aibot
      # Add this to control initialization of test data
      - POSTGRES_SEED_DATA=${SEED_TEST_DATA:-true}
    ports:
      - "5432:5432"  # Expose PostgreSQL port for debugging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aibot"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Remove the chmod command that was causing errors
    # Use the official entrypoint directly

  # Сервис инициализации и исправления базы данных
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: aibot-db-init
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
    command: >
      bash -c "
        echo 'Инициализация базы данных и применение исправлений...' &&
        python scripts/auto_prepare_db.py &&
        python initialize_database.py
      "
    restart: "no"

  # API сервер (FastAPI + Uvicorn)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: aibot-api
    depends_on:
      db-init:
        condition: service_completed_successfully
      minio:
        condition: service_started
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
      - DEBUG=True
      - STORAGE_TYPE=minio
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - MINIO_PUBLIC_URL=http://minio:9000
    ports:
      - "8000:8000"  # Публичный порт API
    # Use a simpler approach to avoid script execution issues
    command: >
      bash -c "
        echo 'Starting API server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    restart: unless-stopped
    # Add restart delay to ensure API is fully ready
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s

  # Admin панель (Flask + Gunicorn)
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: aibot-admin
    depends_on:
      db-init:
        condition: service_completed_successfully
      minio:
        condition: service_started
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin_password
      - STORAGE_TYPE=minio
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - MINIO_PUBLIC_URL=http://minio:9000
    ports:
      - "5001:5000"
    command: >
      bash -c "
        echo 'Starting Admin Panel...' &&
        python -m admin_panel.app
      "
    restart: unless-stopped

  # Telegram бот
  telegram:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: aibot-telegram
    depends_on:
      db-init:
        condition: service_completed_successfully
      api:
        condition: service_started
      minio:
        condition: service_started
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
      - STORAGE_TYPE=minio
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - MINIO_PUBLIC_URL=http://minio:9000
    # Use direct startup to avoid script execution issues
    command: >
      bash -c "
        echo 'Starting Telegram Bot...' &&
        python -m bots.bot
      "
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: aibot-minio
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Сервис инициализации MinIO
  minio-init:
    image: minio/mc
    container_name: aibot-minio-init
    depends_on:
      minio:
        condition: service_started
    volumes:
      - ./minio-init.sh:/minio-init.sh
    env_file:
      - .env
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-user-files}
    entrypoint: ["/bin/sh", "/minio-init.sh"]
    restart: "no"

volumes:
  postgres_data:
  minio_data: