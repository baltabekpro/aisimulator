services:
  # База данных PostgreSQL
  postgres:
    image: postgres:13
    container_name: aibot-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Use a more resilient approach for init script
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh:ro
    environment:
      - POSTGRES_USER=aibot
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aibot
    ports:
      - "5432:5432"  # Expose PostgreSQL port for debugging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aibot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API сервер (FastAPI + Uvicorn)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: aibot-api
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
      - DEBUG=True
    ports:
      - "8000:8000"  # Публичный порт API
    # Use a simpler approach to avoid script execution issues
    command: >
      bash -c "
        echo 'Starting API server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    restart: unless-stopped
    # Add restart delay to ensure API is fully ready
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s

  # Admin панель (Flask + Gunicorn)
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: aibot-admin
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin_password
    ports:
      - "5000:5000"  # Публичный порт админ-панели
    # Use direct startup to avoid script execution issues
    command: >
      bash -c "
        echo 'Starting Admin Panel...' &&
        python -m admin_panel.app
      "
    restart: unless-stopped

  # Telegram бот
  telegram:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: aibot-telegram
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://aibot:postgres@postgres:5432/aibot?client_encoding=utf8
      - API_BASE_URL=http://api:8000/api/v1
    # Use direct startup to avoid script execution issues
    command: >
      bash -c "
        echo 'Starting Telegram Bot...' &&
        python -m bots.bot
      "
    restart: unless-stopped

volumes:
  postgres_data: