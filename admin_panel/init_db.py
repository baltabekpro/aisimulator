"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python init_db.py
"""
import os
import sys
import uuid
import logging
from werkzeug.security import generate_password_hash
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import text, create_engine

# Add the parent directory to sys.path to make module imports work
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Now import from the module using relative imports
try:
    from db.session import engine, Base, get_session
    from admin_panel.models import AdminUser as Admin, UserView as User, CharacterView as Character, MessageView as Message
except ImportError:
    print("Failed to import from existing modules, using direct SQL instead.")

# Set up logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª—è—Ö"""
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
        
        # Create tables if they don't exist
        try:
            Base.metadata.create_all(bind=engine)
            logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ SQLAlchemy")
        except Exception as orm_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ ORM: {orm_error}")
            logger.info("–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL...")
            
            # Fallback to direct SQL
            try:
                # Get database URL from environment
                db_url = os.environ.get("DATABASE_URL")
                if not db_url:
                    db_url = "postgresql://aibot:postgres@postgres:5432/aibot"
                
                # Connect directly
                direct_engine = create_engine(db_url)
                with direct_engine.connect() as conn:
                    # Create admin_users table
                    conn.execute(text("""
                        CREATE TABLE IF NOT EXISTS admin_users (
                            id VARCHAR(36) PRIMARY KEY,
                            username VARCHAR(50) UNIQUE NOT NULL,
                            email VARCHAR(100),
                            password_hash VARCHAR(200) NOT NULL,
                            is_active BOOLEAN DEFAULT TRUE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    """))
                    conn.commit()
                    logger.info("–¢–∞–±–ª–∏—Ü–∞ admin_users —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ SQL")
            except Exception as sql_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQL: {sql_error}")
                raise
        
        logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def create_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        # Get database URL from environment
        db_url = os.environ.get("DATABASE_URL")
        if not db_url:
            db_url = "postgresql://aibot:postgres@postgres:5432/aibot"
        
        # Try different approaches
        try:
            # Using ORM
            session = get_session()
            
            # Create default admin user
            default_username = os.getenv('ADMIN_USERNAME', 'admin')
            default_password = os.getenv('ADMIN_PASSWORD', 'admin_password')
            
            # Check if admin user already exists
            try:
                existing_admin = session.query(Admin).filter_by(username=default_username).first()
                if existing_admin:
                    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ORM)")
                    return True
            except:
                # Table might not exist yet or other error, continue with creation
                pass
            
            admin = Admin(
                id=str(uuid.uuid4()),
                username=default_username,
                password_hash=generate_password_hash(default_password),
                email="admin@example.com",
                is_active=True,
                created_at=datetime.utcnow()
            )
            
            session.add(admin)
            session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_username} (ORM)")
            return True
        except Exception as orm_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ ORM: {orm_error}")
            
            # Fallback to direct SQL
            try:
                logger.info("–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL...")
                direct_engine = create_engine(db_url)
                
                default_username = os.getenv('ADMIN_USERNAME', 'admin')
                default_password = os.getenv('ADMIN_PASSWORD', 'admin_password')
                
                with direct_engine.connect() as conn:
                    # Check if user exists
                    result = conn.execute(text(
                        "SELECT COUNT(*) FROM admin_users WHERE username = :username"
                    ), {"username": default_username})
                    
                    count = result.scalar()
                    if count > 0:
                        logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (SQL)")
                        return True
                    
                    # Create admin user
                    admin_id = str(uuid.uuid4())
                    password_hash = generate_password_hash(default_password)
                    
                    conn.execute(text("""
                        INSERT INTO admin_users (id, username, email, password_hash, is_active)
                        VALUES (:id, :username, :email, :password_hash, TRUE)
                    """), {
                        "id": admin_id,
                        "username": default_username,
                        "email": f"{default_username}@example.com",
                        "password_hash": password_hash
                    })
                    conn.commit()
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_username} (SQL)")
                return True
            except Exception as sql_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ SQL: {sql_error}")
                raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # Get database URL from environment
        db_url = os.environ.get("DATABASE_URL")
        if not db_url:
            db_url = "postgresql://aibot:postgres@postgres:5432/aibot"
        
        direct_engine = create_engine(db_url)
        
        with direct_engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            assert result.scalar() == 1
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            
            # Check for admin_users table
            result = conn.execute(text(
                "SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'admin_users')"
            ))
            if result.scalar():
                logger.info("–¢–∞–±–ª–∏—Ü–∞ admin_users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.warning("–¢–∞–±–ª–∏—Ü–∞ admin_users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def main():
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ üîß")
    print("----------------------------------------------------")
    
    # Load environment variables
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    if not check_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä–Ω—ã.")
        return 1
    
    # Create tables
    if create_tables():
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    # Create admin user
    if create_admin_user():
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    print("\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å:")
    print("python app.py")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
