from typing import Dict, Any, Tuple, List, Optional
from uuid import UUID
from sqlalchemy.orm import Session
from datetime import datetime
import json
import logging

from core.db.models.gift import Gift
from core.db.models.gift_history import GiftHistory
from core.services.base import BaseService
from core.services.love_rating import LoveRatingService
from core.services.message import MessageService

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
AVAILABLE_GIFTS = [
    {
        "id": "flower", 
        "name": "–ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤", 
        "description": "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –±—É–∫–µ—Ç —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤",
        "emoji": "üíê",
        "price": 10, 
        "effect": {
            "general": 3,
            "friendship": 1.5,
            "romance": 3.0,
            "trust": 1.0
        }
    },
    {
        "id": "chocolate", 
        "name": "–ö–æ—Ä–æ–±–∫–∞ –∫–æ–Ω—Ñ–µ—Ç", 
        "description": "–í–∫—É—Å–Ω—ã–µ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–π —É–ø–∞–∫–æ–≤–∫–µ",
        "emoji": "üç´",
        "price": 15, 
        "effect": {
            "general": 5,
            "friendship": 2.0,
            "romance": 3.0,
            "trust": 1.5
        }
    },
    {
        "id": "jewelry", 
        "name": "–£–∫—Ä–∞—à–µ–Ω–∏–µ", 
        "description": "–ö—Ä–∞—Å–∏–≤–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ –∏–∑ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤",
        "emoji": "üíç",
        "price": 50, 
        "effect": {
            "general": 15,
            "friendship": 3.0,
            "romance": 10.0,
            "trust": 5.0
        }
    },
    {
        "id": "perfume", 
        "name": "–î—É—Ö–∏", 
        "description": "–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–æ—Ä–∏—Ç —Å–µ—Ä–¥—Ü–µ",
        "emoji": "üß¥",
        "price": 30, 
        "effect": {
            "general": 10,
            "friendship": 2.0,
            "romance": 7.0,
            "trust": 3.0
        }
    },
    {
        "id": "teddy", 
        "name": "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", 
        "description": "–ú–∏–ª—ã–π –∏ –º—è–≥–∫–∏–π –ø–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞",
        "emoji": "üß∏",
        "price": 20, 
        "effect": {
            "general": 7,
            "friendship": 4.0,
            "romance": 4.0,
            "trust": 2.0
        }
    },
    {
        "id": "vip_gift", 
        "name": "VIP –ü–æ–¥–∞—Ä–æ–∫", 
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ",
        "emoji": "‚ú®",
        "price": 100, 
        "effect": {
            "general": 25,
            "friendship": 8.0,
            "romance": 15.0,
            "trust": 10.0
        }
    }
]

class GiftService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏."""
    
    def __init__(self, db: Session):
        super().__init__(Gift, db)
        self.love_rating_service = LoveRatingService(db)
    
    def get_available_gifts(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤."""
        return AVAILABLE_GIFTS
    
    def get_gift_by_id(self, gift_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –ø–æ ID."""
        return next((g for g in AVAILABLE_GIFTS if g["id"] == gift_id), None)
    
    def send_gift(self, user_id: UUID, partner_id: UUID, gift_id: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            partner_id: ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            gift_id: ID –ø–æ–¥–∞—Ä–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
        """
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID
        gift = self.get_gift_by_id(gift_id)
        if not gift:
            raise ValueError(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
        gift_history = GiftHistory(
            user_id=user_id,
            partner_id=partner_id,
            gift_id=gift_id,
            gift_name=gift["name"],
            sent_at=datetime.utcnow()
        )
        self.db.add(gift_history)
        self.db.commit()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        effects = gift["effect"]
        general_effect = effects.get("general", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥
        if general_effect != 0:
            self.love_rating_service.update_rating(user_id, partner_id, general_effect)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é –±–æ—Ç–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
        message_service = MessageService(db=self.db)
        gift_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∏–ª –ø–æ–¥–∞—Ä–æ–∫ {gift['name']} {gift['emoji']}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫."
        ai_reaction = message_service.generate_bot_response(
            user_id=user_id,
            partner_id=partner_id,
            message=gift_message
        )
        
        # Check if this is a multi-message response
        if "multi_messages" in ai_reaction:
            # Already properly formatted, return as is
            return {
                "gift": gift,
                "reaction": ai_reaction,
                "relationship_changes": ai_reaction.get("relationship_changes", {"general": 0})
            }
        
        # Check if response contains JSON code block
        response_text = ai_reaction.get("text", "")
        if response_text.startswith("```json") and response_text.endswith("```"):
            try:
                # Extract the JSON content
                json_text = response_text.replace("```json", "").replace("```", "").strip()
                json_data = json.loads(json_text)
                
                # Check if this contains multi-message format
                if "messages" in json_data:
                    # Process multi-message format
                    multi_messages = json_data.get("messages", [])
                    relationship_changes = json_data.get("relationship_changes", {"general": 0})
                    
                    # Create bot messages for each message in the array
                    final_responses = []
                    for msg_info in multi_messages:
                        emotion = msg_info.get("emotion", "neutral")
                        if isinstance(emotion, dict):
                            emotion = emotion.get("name", "neutral")
                        if emotion not in ["happy", "sad", "angry", "excited", "anxious", "neutral"]:
                            emotion = "neutral"
                        
                        text = msg_info.get("text", "")
                        delay = msg_info.get("delay", 1)
                        
                        bot_submsg = message_service.create_bot_message(
                            user_id=user_id,
                            partner_id=partner_id,
                            content=text,
                            emotion=emotion
                        )
                        
                        final_responses.append({
                            "id": str(bot_submsg.message_id),
                            "text": text,
                            "delay": delay,
                            "typing_status": "typing",
                            "emotion": emotion
                        })
                    
                    # Replace raw response with properly parsed multi-message format
                    ai_reaction = {
                        "multi_messages": final_responses,
                        "relationship_changes": relationship_changes
                    }
                else:
                    # Update the AI reaction with the parsed content
                    ai_reaction["text"] = json_data.get("text", response_text)
                    if "emotion" in json_data:
                        ai_reaction["emotion"] = json_data["emotion"]
                    if "relationship_changes" in json_data:
                        ai_reaction["relationship_changes"] = json_data["relationship_changes"]
                    
            except json.JSONDecodeError:
                # Keep the response as is if parsing fails
                logging.getLogger(__name__).warning(f"Failed to parse JSON from gift response: {response_text[:100]}...")
        
        # Ensure emotion is properly formatted
        if isinstance(ai_reaction.get("emotion"), str):
            ai_reaction["emotion"] = {
                "name": ai_reaction["emotion"],
                "intensity": 0.8,
                "timestamp": datetime.now().isoformat()
            }
        
        # Ensure relationship changes are always present
        relationship_changes = ai_reaction.get("relationship_changes", {})
        if not relationship_changes or "general" not in relationship_changes:
            relationship_changes = {"general": 0}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "gift": gift,
            "reaction": ai_reaction,
            "relationship_changes": relationship_changes
        }
    
    def get_gift_history(self, user_id: UUID, partner_id: UUID, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø–∞—Ä—Ç–Ω–µ—Ä."""
        gift_history = self.db.query(GiftHistory).filter(
            GiftHistory.user_id == user_id,
            GiftHistory.partner_id == partner_id
        ).order_by(GiftHistory.sent_at.desc()).limit(limit).all()
        
        return [
            {
                "id": str(h.id),
                "gift_id": h.gift_id,
                "gift_name": h.gift_name,
                "sent_at": h.sent_at.isoformat()
            }
            for h in gift_history
        ]
